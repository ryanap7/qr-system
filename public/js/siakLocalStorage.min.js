"use strict";
var SiakLocalStorage = (() => {
    var e =
        window.indexedDB ||
        window.mozIndexedDB ||
        window.webkitIndexedDB ||
        window.msIndexedDB;
    let t = (e) => (e < 10 && (e = "0" + e), e.toString());
    return {
        idb: {
            _name: "",
            _version: 1,
            setName: (e) => {
                this._name = void 0 !== e ? e.toString() : "haryanto_darma";
            },
            getName: () => this._name,
            setVersion: () => {
                let e;
                if (moment) {
                    let t = moment().local(),
                        r = moment(t).utcOffset("+0700");
                    e = SiakDev.siakBigInt(r.format("YYYYMMDDHHmmss"));
                } else {
                    let r = new Date().toLocaleString("en-US", {
                            timeZone: "Asia/Jakarta",
                        }),
                        o = new Date(r),
                        n = t(o.getDate()),
                        a = t(o.getMonth() + 1),
                        i = o.getFullYear().toString(),
                        c = t(o.getTime()),
                        s = t(o.getMinutes()),
                        u = t(o.getSeconds());
                    e = SiakDev.siakBigInt(i + a + n + c + s + u);
                }
                this._version = e;
            },
            getVersion: () => this._version,
        },
        init: (e) => {
            SiakLocalStorage.idb.setName(e), SiakLocalStorage.idb.setVersion();
        },
        create: (t, r) =>
            new Promise(function (o, n) {
                void 0 === r.key && n(Error("object has no id."));
                var a = e.open(
                    SiakLocalStorage.idb.getName(),
                    SiakLocalStorage.idb.getVersion()
                );
                (a.onerror = function (e) {
                    n(Error("IndexedDB database error"));
                }),
                    (a.onupgradeneeded = function (e) {
                        var a;
                        try {
                            a = e.target.transaction.objectStore(t);
                        } catch (r) {
                            a = e.target.result.createObjectStore(t, {
                                keyPath: "key",
                            });
                        }
                        a.transaction.oncomplete = function (e) {
                            var a = e.target.db.result
                                .transaction([t], "readwrite")
                                .objectStore(t)
                                .put(r);
                            (a.onerror = function (e) {
                                n(Error("Error text"));
                            }),
                                (a.onsuccess = function (e) {
                                    o(a.result);
                                });
                        };
                    }),
                    (a.onsuccess = function (e) {
                        var a = e.target.result
                            .transaction([t], "readwrite")
                            .objectStore(t)
                            .put(r);
                        (a.onerror = function (e) {
                            n(Error("Error text"));
                        }),
                            (a.onsuccess = function (e) {
                                o(a.result);
                            });
                    });
            }),
        read: (t, r) =>
            new Promise((o, n) => {
                var a = e.open(
                    SiakLocalStorage.idb.getName(),
                    SiakLocalStorage.idb.getVersion()
                );
                (a.onerror = function (e) {
                    n(Error("Error text"));
                }),
                    (a.onupgradeneeded = function (e) {
                        var a;
                        try {
                            a = e.target.transaction.objectStore(t);
                        } catch (r) {
                            a = e.target.result.createObjectStore(t, {
                                keyPath: "key",
                            });
                        }
                        a.transaction.oncomplete = function (e) {
                            var a = e.target.db
                                .transaction([t])
                                .objectStore(t)
                                .get(r);
                            (a.onerror = function (e) {
                                n(Error("Error text"));
                            }),
                                (a.onsuccess = function (e) {
                                    a.result
                                        ? o(a.result)
                                        : n(Error("object not found"));
                                });
                        };
                    }),
                    (a.onsuccess = function (e) {
                        var a = e.target.result
                            .transaction([t])
                            .objectStore(t)
                            .get(r);
                        (a.onerror = function (e) {
                            n(Error("Error text"));
                        }),
                            (a.onsuccess = function (e) {
                                a.result
                                    ? o(a.result)
                                    : n(Error("object not found"));
                            });
                    });
            }),
        delete: (t, r) =>
            new Promise(function (o, n) {
                void 0 === r.key && n(Error("object has no id."));
                var a = e.open(
                    SiakLocalStorage.idb.getName(),
                    SiakLocalStorage.idb.getVersion()
                );
                (a.onerror = function (e) {
                    n(Error("IndexedDB database error"));
                }),
                    (a.onupgradeneeded = function (e) {
                        var a;
                        try {
                            a = e.target.transaction.objectStore(t);
                        } catch (r) {
                            a = e.target.result.createObjectStore(t, {
                                keyPath: "key",
                            });
                        }
                        a.transaction.oncomplete = function (e) {
                            var a = e.target.db
                                .transaction([t], "readwrite")
                                .objectStore(t)
                                .delete(r.key);
                            (a.onerror = function (e) {
                                n(Error("Error text"));
                            }),
                                (a.onsuccess = function (e) {
                                    o(a.result);
                                });
                        };
                    }),
                    (a.onsuccess = function (e) {
                        var a = e.target.result
                            .transaction([t], "readwrite")
                            .objectStore(t)
                            .delete(r.key);
                        (a.onerror = function (e) {
                            n(Error("Error text"));
                        }),
                            (a.onsuccess = function (e) {
                                o(a.result);
                            });
                    });
            }),
    };
})();
